import { getModelForClass, prop, Ref } from "@typegoose/typegoose";
import mongoose from "mongoose";
import { Mentorship } from "./Mentorships";
import CommunicationPreference from "./CommunicationPreference";

export interface IMentor {
  _id?: mongoose.Types.ObjectId;
  firebaseUID: string; // Should be autogenerated by client-side firebase.
  name: string;
  email: string;
  timezone: string;
  phone: string;
  pronouns: string;
  avatar: string; // Assumed to be a URL
  bio: string;
  major: string;
  communicationPreference: CommunicationPreference;
  gradeLevels: string[];
  mentorships?: Ref<Mentorship>;
}

export class Mentor implements IMentor {
  public _id: mongoose.Types.ObjectId;

  @prop({ required: true, unique: true })
  public firebaseUID: string;

  @prop({ required: true })
  public name: string;

  @prop({ required: true, unique: true })
  public email: string;

  @prop({ required: true })
  public timezone: string;

  @prop({ required: true, unique: true })
  public phone: string;

  @prop({ required: true })
  public pronouns: string;

  @prop({ required: true })
  public major: string;

  @prop({ required: true })
  public communicationPreference: CommunicationPreference;

  @prop({
    required: true,
    validate: {
      validator: (v) => v.length >= 1,
      message: "Mentor must select at least one grade level.",
    },
    type: String,
  })
  public gradeLevels: string[];

  @prop({ required: true })
  public bio: string;

  @prop({ required: true })
  public avatar: string;
}

const MentorModel = getModelForClass(Mentor);

export default MentorModel;
